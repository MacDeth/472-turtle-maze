-- Variables --
arg = {...} -- Lua Command Line arguments
rednet = ""
maze = {}
shortest_path = {}

-- Turtle's Current Position --
current_x = 0
current_z = 0 -- We don't care about y in the orientation of this game

-- Top Left Corner of Maze --
min_x = 0;
min_z = 0;

-- Bottom Right Corner of Maze --
max_x = 0;
max_z = 0;  

-- Turtle's Relative Orientation --
orientation = 0 --0 = -x, 1 = -z, 2 = +x, 3 = +z
--In Array, Treat down as +z and right as +x. Dir assumes we start looking towards -x.

-- Main Function --
function main()
		-- Receive Argument Which states which Rednet Computer to Send To. --
		rednet = arg[1]
		
		-- Start FSM Machine which Searches for Goal Block via Left Hand Rule --
		-- Retrieve Maze from End Finder 
		found = FindEnd()
		
		--Fill In Gaps on Maze
		for i=min_x, max_x do
			for j=min_z, max_z do
				if maze[i][j] == nil then 
					maze[i][j] = 0;
				end
			end
		end
		
		if found then
			--Perform Dijkstra Search on that maze and return the Shortest Path Known --
			shortest_path = FindShortestPath(maze)
		else
			print("Robot Could not Find End, Exiting...")
		end
end

-- Turning Helper Functions --
function turnLeft()
	turtle.turnLeft();
	orientation = (orientation - 1) % 4;
end
 
function turnRight()
	turtle.turnRight();
	orientation = (orientation + 1) % 4;
end

function forward()
	turtle.forward()
	if orientation == 0 then -- -x orientation
		current_x = current_x - 1
	elseif orientation == 1 then -- -z orientation
		current_z = current_z - 1
	elseif orientation == 2 then -- +x orientation
		current_x = current_x + 1
	elseif orientation == 3 then -- +z orientation
		current_z = current_z + 1
	end
	print(current_x, current_z)
end

------------------------------
-- FSM End Finder Functions --
------------------------------

local function IsEnd()

	local success, data = turtle.inspectDown()
	if success then
		if data.metadata == 14 then return true end --Checks if ending block is Green.
	end

  return false
end

function FindEnd()
	local ITERATION_MAX = 10000
	local end_found = fal

	local i = 0
	while i < ITERATION_MAX do
		
		if IsEnd() then
			-- State: End Found
			end_found = true
			break
		end

		-- State: Turn to Opening
		turnLeft()
		-- State: Observe
		while turtle.detect() do
			 -- Map the block on array map --
			if orientation == 0 then -- -x orientation
				insert((current_x - 1), (current_z))
				if current_x -1 < min_x then 
					min_x = current_x - 1
				end
			elseif orientation == 1 then -- -z orientation
				insert((current_x), (current_z - 1))
				--maze[current_x][current_z - 1] = 1
				if current_z - 1 < min_z then 
					min_z = current_z - 1
				end
			elseif orientation == 2 then
				insert((current_x + 1), (current_z))
				--maze[current_x +1][current_z] = 1 -- +x orientation
				if current_x + 1 > max_x then 
					max_x = current_x + 1
				end
			elseif orientation == 3 then
				insert((current_x), (current_z + 1))
				--maze[current_x][current_z + 1] = 1 -- +z orientation
				if current_z + 1 > max_z then 
					max_z = current_z + 1
				end
			end
			  
			  -- State: Turn to Opening
			  turnRight()
			  -- State: Observe
		end
    -- State: Move
    forward()
    i = i + 1
  end

  return end_found
end

function insert(x, z)
	if not maze[x] then
		maze[x] = {}
	end
	maze[x][z] = 1
end


------------------------------------
-- Djikstra Pathfinding Functions --
------------------------------------

--Creates shortest path 
function FindShortestPath(maze, N, M)  
	
	print2DMaze(maze)
	mt = adjacencyMatrix(maze, N, M)
	printAdjacencyMatrix(mt)
	
	Djikstra(mt);
	
	S = {}
	u = target

	--Construct Path To Goal
	while prev[u] ~= nil do
		table.insert(S, 1, u)
		u = prev[u]
	end
	table.insert(S, 1, u) --Get final Num
	
	printShortestPath(S)
	
	return S --Shortest Path
end

function adjacencyMatrix(maze, N, M)
	mt = {};
	for i=1, N-1 do
		for j=1, M-1 do
			currValue = maze[i][j]
			if currValue ~= 0 then
				--Determine if Node Adjacent East of Current
				eastValue = maze[i+1][j]
				if eastValue ~= 0 then
					mt[currValue][eastValue] = 1
					mt[eastValue][currValue] = 1
				end
				--Determine if Node Adjacent South of Current
				southValue = maze[i][j+1]
				if southValue ~= 0 then
                    mt[currValue][southValue] = 1
                    mt[southValue][currValue] = 1
                end
            end
        end
    end
	return mt
end

function Djikstra(mt)

	--Initialization
	Q = {}
	Qsize = 0
	dist = {}
	prev = {}

	for v=1, numNodes do
			dist[v] = math.huge --Unknown Distance from source to v
			prev[v] = nil --Previous node in optimal path from source
			Q[v] = true --All nodes initially in Q (unvisited nodes)
			Qsize = Qsize + 1
	end

	dist[source] = 0 --Distance from source to source

	while Qsize > 0 do --Iterate While Q not Empty
		u = 0 --Instantiate u variable

		--Node with least distance selected first
		mindist = math.huge
		for k, v in pairs(Q) do --Iterate through set
			if v ~= nil then
				if dist[k] <= mindist then
						u = k
						mindist = dist[k]
				end
			end
		end

		Q[u] = nil; --Remove u from set Q
		Qsize = Qsize - 1

		if (u == target) then
			break
		end

		for v in pairs(Q) do
			if mt[u][v] == 1 then --For Each Neighbor
				alt = dist[u] + 1 --Length from U to V is always 1
				if alt < dist[v] then
					dist[v] = alt
					prev[v] = u
				end
			end
		end
	end
end

function print2DMaze(maze)
	print("Original Maze:")
	for i=min_x, max_x do
	   for j=min_z, max_z do
		   io.write(string.format("%3d", maze[i][j]))
	   end
	   print()
	end
end

function printAdjacencyMatrix(mt)
	print("\nAdjacency Matrix:")
	for i=1, numNodes do
	   for j=1, numNodes do
		   io.write(string.format("%2d", mt[i][j]))
	   end
	   print()
	end
end

function printShortestPath(S)
	print("\nDjikstra Path:")
	--Print Path
	for i = 1, #S do
		io.write(S[i])
		if i ~= #S then
			io.write("->")
		end
	end
end

-- Start Main Function --
main()
