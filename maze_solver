-- Variables --
arg = {...} -- Lua Command Line arguments
rednet_id = 0
r_enabled = 0
maze = {}
state = ""


start_x = 0
start_z = 0

-- Current Position we are calculating Dijkstra
calc_x = 0
calc_z = 0


-- Turtle's Current Position --
current_x = 0
current_z = 0 -- We don't care about y in the orientation of this game

-- Top Left Corner of Maze --
min_x = 0;
min_z = 0;

-- Bottom Right Corner of Maze --
max_x = 0;
max_z = 0;  

end_x = 0
end_z = 0

-- Turtle's Relative Orientation --
orientation = 0 --0 = -x, 1 = -z, 2 = +x, 3 = +z

-- Dijkstra Variables --
mt = {}
shortest_path = {}
path_length = 1 --Always start 1 even if starting node
dist = {} -- Distances
prev = {} -- 'Previous' of each node
numNodes = 0 --Number of Nodes Generated
source = 0
target = 0

-- Main Function --
function main()
		-- Receive Argument Which states which Rednet Computer to Send To. --
		rednet_id = tonumber(arg[1])
		r_enabled = arg[2]
		print(rednet_id)
		-- Start FSM Machine which Searches for Goal Block via Left Hand Rule --
		-- Retrieve Maze from End Finder 
		state = "Find End"
		found = FindEnd()
		
		-- Fill In Gaps on Maze --
		
		if found then
			state = "Calculating Shortest Path"
			--Perform Dijkstra Search on that maze and return the Shortest Path Known --
			calc_x = start_x
			calc_z = start_z
			FindShortestPath()
		else
			print("Robot Could not Find End, Exiting...")
		end
		
		-- Perform FSM Traversal back to start and then backtrace to goal
		state = "Traversing Path"
		DoTraversal()
end

-- Turning Helper Functions --
function turnLeft()
	turtle.turnLeft();
	orientation = (orientation + 1) % 4;
end
 
function turnRight()
	turtle.turnRight();
	orientation = (orientation - 1) % 4;
end

function forward()
	turtle.forward()
	if orientation == 0 then -- -x orientation
		current_x = current_x - 1
		if current_x < min_x then 
			min_x = current_x
		end
	elseif orientation == 1 then -- -z orientation
		current_z = current_z - 1
		if current_z < min_z then 
			min_z = current_z
		end
	elseif orientation == 2 then -- +x orientation
		current_x = current_x + 1
		if current_x > max_x then 
			max_x = current_x
		end
	elseif orientation == 3 then -- +z orientation
		current_z = current_z + 1
		if current_z > max_z then 
			max_z = current_z
		end
	end
	--print(current_x, current_z)
end

function MapWall()
	if orientation == 0 then -- -x orientation
		insert((current_x - 1), (current_z), 0)
		if current_x - 1 < min_x then 
			min_x = current_x - 1
		end
	elseif orientation == 1 then -- -z orientation
		insert((current_x), (current_z - 1), 0)
		--maze[current_x][current_z - 1] = 1
		if current_z - 1 < min_z then 
			min_z = current_z - 1
		end
	elseif orientation == 2 then
		insert((current_x + 1), (current_z), 0)
		--maze[current_x +1][current_z] = 1 -- +x orientation
		if current_x + 1 > max_x then 
			max_x = current_x + 1
		end
	elseif orientation == 3 then
		insert((current_x), (current_z + 1), 0)
		--maze[current_x][current_z + 1] = 1 -- +z orientation
		if current_z + 1 > max_z then 
			max_z = current_z + 1
		end
	end
	UpdateRedNet()
end

------------------------------
-- FSM End Finder Functions --
------------------------------

local function IsEnd()

	local success, data = turtle.inspectDown()
	if success then
		if data.metadata == 14 then return true end --Checks if ending block is Green.
	end

  return false
end

function FindEnd()
	local ITERATION_MAX = 10000
	local end_found = fal

	local i = 0
	while i < ITERATION_MAX do
		
		if IsEnd() then
			-- State: End Found
			end_x, end_z = current_x, current_z;
			end_found = true
			break
		end

		-- State: Turn to Opening
		turnLeft()
		-- State: Observe
		--insert(current_x, current_z, numNodes + 1)
		--numNodes = numNodes + 1
		
		while turtle.detect() do
			 -- Map the block on array map --
			MapWall()
			  
			-- State: Turn to Opening
			turnRight()
			-- State: Observe
		end
    -- State: Move
    forward()
    i = i + 1
  end

  return end_found
end

function insert(x, z, val)
	if not maze[x] then
		maze[x] = {}
	end
	maze[x][z] = val
end


------------------------------------
-- Djikstra Pathfinding Functions --
------------------------------------

--Creates shortest path 
function FindShortestPath()  
	
	-- Make Sure Maze is full of Nodes --
	for i=min_x, max_x do
		for j=min_z, max_z do
			if maze[i] == nil then
				maze[i] = {}
			end
			if maze[i][j] == nil then 
				insert(i, j, numNodes + 1)
				numNodes = numNodes + 1
			end
		end
	end
	UpdateRedNet()
	
	print2DMaze()
	
	adjacencyMatrix()
	--printAdjacencyMatrix()
	
	Djikstra()
	
	u = target

	--Construct Path To Goal
	shortest_path = {} --Reset shortest Path
	path_length = 1 --Reset path length
	while prev[u] ~= nil do
		path_length = path_length + 1;
		table.insert(shortest_path, 1, u)
		u = prev[u]
	end
	table.insert(shortest_path, 1, u) --Get final Num
	
	printShortestPath()
end

function adjacencyMatrix()
	mt = {} --Reset Matrix!
	-- Fill matrix with defaults --
    for i=1, numNodes do
		mt[i] = {} -- create a new row
		for j=1,numNodes do
			mt[i][j] = 0
		end
    end
	
	for i=min_x, max_x  do
		for j=min_z, max_z do
			currValue = maze[i][j]
			if currValue > 0 then
					
				if i < max_x then --Make Sure We arent at end
					--Determine if Node Adjacent East of Current
					eastValue = maze[i+1][j] 
					if eastValue > 0 then
						mt[currValue][eastValue] = 1
						mt[eastValue][currValue] = 1
					end
				end
				
				if j < max_z then  -- Make Sure We arent at end
					--Determine if Node Adjacent South of Current
					southValue = maze[i][j+1]
					if southValue > 0 then
						mt[currValue][southValue] = 1
						mt[southValue][currValue] = 1
					end
				end
            end
        end
    end
end

function Djikstra()

	--Initialization
	Q = {}
	Qsize = 0
	dist = {}
	prev = {}
	source = maze[current_x][current_z]
	target = maze[calc_x][calc_z]
	for v=1, numNodes do
			dist[v] = math.huge --Unknown Distance from source to v
			prev[v] = nil --Previous node in optimal path from source
			Q[v] = true --All nodes initially in Q (unvisited nodes)
			Qsize = Qsize + 1
	end

	dist[source] = 0 --Distance from source to source

	while Qsize > 0 do --Iterate While Q not Empty
		u = 0 --Instantiate u variable

		--Node with least distance selected first
		mindist = math.huge
		for k, v in pairs(Q) do --Iterate through set
			if v ~= nil then
				if dist[k] <= mindist then
						u = k
						mindist = dist[k]
				end
			end
		end

		Q[u] = nil; --Remove u from set Q
		Qsize = Qsize - 1

		if (u == target) then
			--print("Dijkstra Found Goal Node");
			break
		end

		for v in pairs(Q) do
			if mt[u][v] == 1 then --For Each Neighbor
				alt = dist[u] + 1 --Length from U to V is always 1
				if alt < dist[v] then
					dist[v] = alt
					prev[v] = u
				end
			end
		end
	end
end

function print2DMaze()
	print("Original Maze:")
	for i=min_x, max_x do
	   for j=min_z, max_z do
			
			if i == end_x and j == end_z then
				io.write("G")
			elseif i == 0 and j == 0 then
				io.write("S")
			else
				io.write(maze[i][j])
			end
	   end
	   print()
	end
end


function printAdjacencyMatrix()
	print("\nAdjacency Matrix:")
	for i=1, numNodes-1 do
	   for j=1, numNodes-1 do
		   io.write(mt[i][j])
	   end
	   print()
	end
end

function printShortestPath()
	print("\nDjikstra Path:")
	--Print Path
	for i = 1, path_length do
		io.write(shortest_path[i])
		if i ~= path_length then
			io.write("->")
		end
	end
end

----------------------------
-- Do Traversal Functions --
----------------------------
function DoTraversal()
	--Move Back To Starting Location First
	local recalc = TraversePath()
	while recalc do
		FindShortestPath()
		recalc = TraversePath()
	end
	-- Perform Traversal Other Way After Corrections Are Made on Way back --
	calc_x = end_x
	calc_z = end_z
	FindShortestPath()
	recalc = TraversePath()
	while recalc do
		state = "Recalculating Path"
		FindShortestPath()
		state = "Traversing Path"
		recalc = TraversePath()
	end
	--print("")
	state = "Found Goal -- DANCE!"
	UpdateRedNet()
	shell.run("dance")
end

function TraversePath()
    -- follow known path(option 1) --
	local steps = path_length-1
	local recalc = false
	
	for i=GetStepFromNode()+1, path_length do
		local node = shortest_path[i]
		
		if current_x-1 >= min_x and node == maze[current_x-1][current_z] then -- -x orientation
			TurnTo(0) --Turns to 0 Direction in least steps possible
		elseif current_z-1 >= min_z and node == maze[current_x][current_z-1] then -- -z orientation
			TurnTo(1)
		elseif current_x+1 <= max_x and node == maze[current_x+1][current_z] then -- +x orientation
			TurnTo(2)
		elseif current_z+1 <= max_z and node == maze[current_x][current_z+1] then -- +z orientation
			TurnTo(3)
		else
			print("Start To End: Our Dijkstra Algorithm is a Liar.")
			break
		end
		
		if turtle.detect() then
			MapWall()
			recalc = true
		else
			forward()
		end
		steps = steps - 1;
	end
	
	return recalc;
end

function GetStepFromNode()
	step = 0
	for i=1, path_length do 
		if maze[current_x][current_z] == shortest_path[i] then
			step = i;
			print(step)
		end
	end
	return step
end

function TurnTo(direction)
	while direction ~= orientation do
		turnRight();
	end
end


function UpdateRedNet()
	if r_enabled then
		print("Rednet opening on left: " .. rednet_id)
		rednet.open("left")
		local label = os.getComputerLabel()
		local rows = max_x - min_x
		local columns = max_z - min_z
		local mazeString = ""
		for i=min_x, max_x do
			for j=min_z, max_z do
				if maze[i] ~= nil then
					if maze[i][j] == nil then
						mazeString = mazeString .. "1"
					elseif maze[i][j] > 0 then
						mazeString = mazeString .. "1"
					else
						mazeString = mazeString .. "0"
					end
				else
					mazeString = mazeString .. "1"
				end
			end
		end
		rednet.send(rednet_id, label)
		rednet.send(rednet_id, state)
		rednet.send(rednet_id, tostring(rows))
		rednet.send(rednet_id, tostring(columns))
		rednet.send(rednet_id, mazeString)
		rednet.close("left")
	end
end

-- Start Main Function --
main()
