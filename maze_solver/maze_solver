local orientation = 0 --0 = -x, 1 = -z, 2 = +x, 3 = +z
--In Array, Treat down as +z and right as +x. Dir assumes we start looking towards -x.

-- Variables --
arg = {...} -- Lua Command Line arguments
string rednet = ""
table maze = {}
table shortest_path = {}

-- Turtle's Current Position --
int current_x = 0
int current_z = 0 -- We don't care about y in the orientation of this game

-- Top Left Corner of Maze --
int min_x = 0;
int min_z = 0;

-- Bottom Right Corner of Maze --
int max_x = 0;
int max_z = 0;  

-- Turtle's Relative Orientation --
int orientation = 0

-- Load API's --
os.loadAPI("tuple")
os.loadAPI("search_dijkstra")
os.loadAPI("fsm_endfind")

-- Main Function --
function main()
		-- Receive Argument Which states which Rednet Computer to Send To. --
		rednet = arg[1]
		
		-- Start FSM Machine which Searches for Goal Block via Left Hand Rule --
		-- Retrieve Maze from End Finder 
		found = fsm_endfind.FindEnd()
		
		if found then
			--Perform Dijkstra Search on that maze and return the Shortest Path Known --
			shortest_path = search_dijkstra.FindShortestPath(maze)
		else
			print("Robot Could not Find End, Exiting...")
		end
end


-- Turning Helper Functions --
function turnLeft()
	turtle.turnLeft();
	orientation = (orientation - 1) % 4;
end
 
function turnRight()
	turtle.turnRight();
	orientation = (orientation + 1) % 4;
end

function forward()
	turtle.forward()
	if orientation == 0 then -- -x orientation
		current_x = current_x - 1
	elseif orientation == 1 then -- -z orientation
		current_z = current_z - 1
	elseif orientation == 2 then -- +x orientation
		current_x = current_x + 1
	elseif orientation == 3 then -- +z orientation
		current_z = current_z + 1
	end
end

-- Start Main Function --
main()