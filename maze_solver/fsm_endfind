local function IsEnd()

	local success, data = turtle.inspectDown()
	if success then
		if data.metadata == 14 then return true end --Checks if ending block is Green.
	end

  return false
end

function FindEnd()
	local ITERATION_MAX = 10000
	local end_found = fal

	local i = 0
	while i < ITERATION_MAX do
		
		if IsEnd() then
			-- State: End Found
			end_found = true
			break
		end

		-- State: Turn to Opening
		turnLeft()
		-- State: Observe
		while turtle.detect() do
			 -- Map the block on array map --
			if orientation == 0 then -- -x orientation
				maze[current_x - 1][current_z] = 1
				if current_x -1 < min_x then 
					min_x = current_x - 1
				end
			elseif orientation == 1 then -- -z orientation
				maze[current_x][current_z - 1] = 1
				if current_z - 1 < min_z then 
					min_z = current_z - 1
				end
			elseif orientation == 2 then
				maze[current_x + 1][current_z] = 1 -- +x orientation
				if current_x + 1 > max_x then 
					max_x = current_x + 1
				end
			elseif orientation == 3 then
				maze[current_x][current_z + 1] = 1 -- +z orientation
				if current_z + 1 > max_z then 
					max_z = current_z + 1
				end
			end
			  
			  -- State: Turn to Opening
			  turnRight()
			  -- State: Observe
		end
    -- State: Move
    turtle.forward()
    i = i + 1
  end

  return end_found
end
